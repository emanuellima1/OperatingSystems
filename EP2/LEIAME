Emanuel Lima de Sousa - 9009493
João Seckler - 4603521

Compilação:
$ make

Execução:
$ ./ep2 <d> <n> [debug]


TODO

destruir threads - ok
velocidade - ok
ultrapassagem - ok
colocação - ok
eliminação do último colocado - ok
quebra - ok
output - ok
debug - ok
sorteio de velocidade - ok
90km/h - ok

OBSERVAÇÕES DE IMPLEMENTAÇÃO

- Na nossa implementação a cada ciclista corresponde uma "struct
  corredor". O vetor compartilhado "pista" é uma matriz de ponteiros
  para "struct corredor" (guardando NULL numa posição se nenhum corredor
  estiver aí presente).

- Opção debug: passe "debug" como terceiro argumento. A cada 60ms (ou
  20ms, se alguém estiver correndo a 90km/h) o programa imprime a pista.
  O sentido da pista é da esquerda para a direita. Os ciclistas são
  identificados por números. Um lugar da pista vazio é identificado por
  um underscore ("_").

- Assim como na corrida real, os corredores começam antes da linha de
  chegada. O nosso algoritmo conta um "turno fantasma", onde uma
  variável turn é igual a -1, que corresponde a esse momento entre a
  partida e a primeira vez que o corredor passa pela linha de chegada.

- A posição x de cada corredor (deslocamento frente/trás) é guardada
  como o dobro do que de fato é. Para ler/escrever, dividimos
  inteiramente por 2. Quando houver alguém correndo a 90, essa constante
  passa a ser 6.

- Quando um ciclista correr rodadas suficientes para determinar sua
  posição em todas as rodadas da corrida, a thread correspondente é
  desalocada e tudo se passa como se esse corredor fora eliminado,
  exceto que a sua posição em cada volta foi armazenada e vamos poder
  anunciar sua colocação.

- Em toda rodada, cada ciclista tenta andar quantas posições for
  possível à sua esquerda.
